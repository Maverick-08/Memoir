// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  firstName String
  lastName String
  email    String  @unique
  password String?
  course String
  branch String
  yearOfPassingOut Int
  verified Boolean @default(false)
  codeforces String?
  leetcode String?
  gfg String?
  github String?
  linkedIn String?
  xHandle  String?
  profileUrl String?
  backgroundImageUrl String?
  createdAt DateTime @default(now())
  stats UserStat?
  post Post[] 
  savedPosts SavedPost[]
  interviewExperience InterviewExperience[]
  workExperience WorkExperience[]
}

model OTP {
  id String @id @default(cuid())
  userId String @unique
  otp Int
}

model UserStat{
  id String @id @default(cuid())
  userId String @unique
  profileViews Int @default(0)
  postImpressionCount Int @default(0)
  user User @relation(fields: [userId], references: [id])
}

model Post {
  id String  @id @default(cuid())
  authorId String
  content String
  impressionCount Int @default(0)
  saveCount Int @default(0)
  reportCount Int @default(0)
  createdAt DateTime @default(now())
  user User @relation(fields: [authorId],references: [id], onDelete: Cascade)
  tag Tags[]
  postResource PostImageResources[]
}

model PostImageResources{
  id String  @id @default(cuid())
  postId String
  imageUrl String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tags{
  id String @id @default(cuid())
  postId String
  tagName String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model SavedPost{
  id String @id @default(cuid())
  userId String
  postId String @unique
  user User @relation(fields: [userId], references: [id])
}

// Interview Experiences
model InterviewExperience {
  id       String   @id @default(cuid())
  creatorId String
  creatorName String
  branchTag String
  companyName String
  compensation Float
  interviewDate DateTime
  offerType String
  interviewStatus String
  roundDetails RoundDetails[]
  createdAt DateTime @default(now())
  user User @relation(fields: [creatorId], references: [id])
}

model RoundDetails {
  id       String   @id @default(cuid())
  interviewExperienceId String
  roundName String
  roundType String
  note     String?
  questions Question[]
  interviewExperience InterviewExperience @relation(fields: [interviewExperienceId], references: [id], onDelete: Cascade)
}

model Question {
  id       String   @id @default(cuid())
  title    String
  description String
  link     String?
  roundDetails RoundDetails @relation(fields: [roundDetailsId], references: [id],onDelete: Cascade)
  roundDetailsId String
}

// Applied Openings
model AppliedOpenings {
  id String @id @default(cuid())
  creatorId String
  companyName String
  offerType String
  interviewStatus String
  note String?
  followUpDate DateTime?
  createdAt DateTime @default(now())
}

// Data Models for Messaging
model Conversation{
  id String @id @default(cuid())
  userId_1 String
  userId_2 String
  pinned Boolean @default(false)
  createdAt DateTime @default(now())
  message Message[]
}

model Message{
  id String @id @default(cuid())
  conversationId String
  senderId String
  content String
  timestamp DateTime @default(now())
  conversation Conversation @relation(fields: [conversationId], references: [id],onDelete: Cascade)
}

// Notifications
model Notifications{
  id String @id @default(cuid())
  creatorName String
  receiverId String?
  content String
  createdAt DateTime @default(now())
}

model WorkExperience{
  id String @id @default(cuid())
  userId String
  companyName String
  startDate DateTime
  endDate DateTime?
  position String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reviews{
  id String  @id @default(cuid())
  name String
  userType String
  reviewCategory String
  message String
}